apply plugin: 'nexus'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
 
version = '0.1-SNAPSHOT'
group = 'org.wallerlab'

sourceCompatibility = 1.8


buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7.1'
		classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"

	}
}

jar {
	from{
		configurations.compile.collect{
			it.isDirectory() ? it:zipTree(it)
		}
		configurations.runtime.collect{
			it.isDirectory() ? it:zipTree(it)
		}
	}
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version,
		'Main-Class': 'cluster.Main'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
	compile 'org.aspectj:aspectjweaver:1.8.4'
	compile 'org.aspectj:aspectjrt:1.8.4'
	compile 'org.apache.logging.log4j:log4j-core:2.1'
	compile 'org.springframework:spring-context:4.1.0.RELEASE'
	compile 'org.springframework:spring-jms:4.1.0.RELEASE'	
	compile 'org.springframework.integration:spring-integration-core:4.0.4.RELEASE'
	compile'org.springframework.integration:spring-integration-file:4.0.4.RELEASE'
	compile 'org.apache.activemq:activemq-all:5.10.0'
	compile 'com.google.guava:guava:18.0'
    testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile 'cglib:cglib-nodep:2.2.2'
	testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
	testCompile 'org.codehaus.groovy:groovy-all:2.4.0'
}

nexus {
	attachSources = false
	attachTests = true
	attachJavadoc = true
	sign = true
	repositoryUrl = 'http://wallerlab.uni-muenster.de:9090/nexus-2.8.1-01/content/repositories/releases/'
	snapshotRepositoryUrl = 'http://wallerlab.uni-muenster.de:9090/nexus-2.8.1-01/content/repositories/snapshots/'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.3'
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }

  afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/xml_cml/**'])
            })
    }
}

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
